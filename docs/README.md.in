${toc}

# SAGE: *Super Advanced Game Engine*

## Getting Started
```
git clone git@github.com:KotzaBoss/sage.git
cd sage
cmake -B build
cmake --build build -- sage
./build/bin/sage
```
To customize the build see [[README#Build]].

Once you have a successful build you can begin reading [[bin/main.cpp]] and the tests to get a feel for the project.

## Development

> [!TIP] When in doubt...
> `cmake --build build -- usage`

A big part of SAGE is automated. Once you are done tweaking/extending/refactoring, make sure you _configure_ cmake at least once to generate docs.

### Build
```
cmake -B build	\
      -G Ninja	\
      -D CMAKE_LINKER=mold
cmake --build build
./build/bin/sage
```

${options}

### Test

The testing framework used is [Doctest](https://github.com/doctest/doctest). Following the patterns proposed by its devs, the test code for a module is in the module file itself. The convention is that a preprocessor `#define`, based on the path to the file, guards the doctest code, generally at the bottom of the file. A full example will make this clear.

Assume we make a module `src/platform/linux/my_module.hpp`:

```cpp
#pragma once

#include "..."

namespace sage {
struct Something { ... }\;
}

// Note that the path _after_ src has to be included.
// If our module was `src/my_module.hpp` then the guard would be `SAGE_TEST_MY_MODULE`
#ifdef SAGE_TEST_PLATFORM_LINUX_MY_MODULE

#include "src/some_other_module.hpp"
#include "test/some_testing_stuff.hpp"

namespace {     // Recommended if we use `using namespace sage`

using namespace sage\;

TEST_CASE ("My Module") {
    ...
}

}
#endif
```

The test executable will be automatically generated when you configure `cmake` so be sure to run it before testing/commiting. See [[test/CMakeLists.txt]] for the details.

## Project Overview
${tree_summary}.
```
${tree}
```

